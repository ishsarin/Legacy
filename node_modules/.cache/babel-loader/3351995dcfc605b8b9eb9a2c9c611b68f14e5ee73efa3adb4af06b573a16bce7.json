{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeUUID = exports.toLowerCamelCase = exports.toCamelCase = exports.camelToSnakeCase = void 0;\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst uuid_1 = require(\"uuid\");\nfunction words(str) {\n  let normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (normalize) {\n    // strings like somethingABCSomething are special case for protobuf.js,\n    // they should be split as \"something\", \"abc\", \"something\".\n    // Deal with sequences of capital letters first.\n    str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, str => {\n      return str[0] + str.slice(1, str.length - 1).toLowerCase() + str[str.length - 1];\n    });\n  }\n  // split on spaces, non-alphanumeric, or capital letters\n  // note: we keep the capitalization of the first word (special case: IPProtocol)\n  return str.split(/(?=[A-Z])|[^A-Za-z0-9.]+/).filter(w => w.length > 0).map((w, index) => index === 0 ? w : w.toLowerCase());\n}\n/**\n * Converts the first character of the given string to lower case.\n */\nfunction lowercase(str) {\n  if (str.length === 0) {\n    return str;\n  }\n  return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\nfunction camelToSnakeCase(str) {\n  // Keep the first position capitalization, otherwise decapitalize with underscore.\n  const wordsList = words(str);\n  if (wordsList.length === 0) {\n    return str;\n  }\n  const result = [wordsList[0]];\n  result.push(...wordsList.slice(1).map(lowercase));\n  return result.join('_');\n}\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\nfunction capitalize(str) {\n  if (str.length === 0) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */\nfunction toCamelCase(str) {\n  const wordsList = words(str, /*normalize:*/true);\n  if (wordsList.length === 0) {\n    return str;\n  }\n  const result = [wordsList[0]];\n  result.push(...wordsList.slice(1).map(w => {\n    if (w.match(/^\\d+$/)) {\n      return '_' + w;\n    }\n    return capitalize(w);\n  }));\n  return result.join('');\n}\nexports.toCamelCase = toCamelCase;\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction toLowerCamelCase(str) {\n  const camelCase = toCamelCase(str);\n  if (camelCase.length === 0) {\n    return camelCase;\n  }\n  return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\nexports.toLowerCamelCase = toLowerCamelCase;\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction makeUUID() {\n  return (0, uuid_1.v4)();\n}\nexports.makeUUID = makeUUID;","map":{"version":3,"names":["Object","defineProperty","exports","value","makeUUID","toLowerCamelCase","toCamelCase","camelToSnakeCase","uuid_1","require","words","str","normalize","arguments","length","undefined","replace","slice","toLowerCase","split","filter","w","map","index","lowercase","wordsList","result","push","join","capitalize","toUpperCase","match","camelCase","v4"],"sources":["D:/html/Legacy/node_modules/google-gax/build/src/util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeUUID = exports.toLowerCamelCase = exports.toCamelCase = exports.camelToSnakeCase = void 0;\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst uuid_1 = require(\"uuid\");\nfunction words(str, normalize = false) {\n    if (normalize) {\n        // strings like somethingABCSomething are special case for protobuf.js,\n        // they should be split as \"something\", \"abc\", \"something\".\n        // Deal with sequences of capital letters first.\n        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str) => {\n            return (str[0] +\n                str.slice(1, str.length - 1).toLowerCase() +\n                str[str.length - 1]);\n        });\n    }\n    // split on spaces, non-alphanumeric, or capital letters\n    // note: we keep the capitalization of the first word (special case: IPProtocol)\n    return str\n        .split(/(?=[A-Z])|[^A-Za-z0-9.]+/)\n        .filter(w => w.length > 0)\n        .map((w, index) => (index === 0 ? w : w.toLowerCase()));\n}\n/**\n * Converts the first character of the given string to lower case.\n */\nfunction lowercase(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\nfunction camelToSnakeCase(str) {\n    // Keep the first position capitalization, otherwise decapitalize with underscore.\n    const wordsList = words(str);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(lowercase));\n    return result.join('_');\n}\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\nfunction capitalize(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */\nfunction toCamelCase(str) {\n    const wordsList = words(str, /*normalize:*/ true);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(w => {\n        if (w.match(/^\\d+$/)) {\n            return '_' + w;\n        }\n        return capitalize(w);\n    }));\n    return result.join('');\n}\nexports.toCamelCase = toCamelCase;\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction toLowerCamelCase(str) {\n    const camelCase = toCamelCase(str);\n    if (camelCase.length === 0) {\n        return camelCase;\n    }\n    return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\nexports.toLowerCamelCase = toLowerCamelCase;\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction makeUUID() {\n    return (0, uuid_1.v4)();\n}\nexports.makeUUID = makeUUID;\n//# sourceMappingURL=util.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}